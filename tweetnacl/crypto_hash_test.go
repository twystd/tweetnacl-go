package tweetnacl

import (
	"crypto/sha512"
	"fmt"
	"math/rand"
	"testing"
)

// --- CryptoHash ---

// Adapted from tests/core1.c)
func TestCryptoHash(t *testing.T) {
	message := []byte("testing\n")

	expected := []byte{
		0x24, 0xf9, 0x50, 0xaa, 0xc7, 0xb9, 0xea, 0x9b,
		0x3c, 0xb7, 0x28, 0x22, 0x8a, 0x0c, 0x82, 0xb6,
		0x7c, 0x39, 0xe9, 0x6b, 0x4b, 0x34, 0x47, 0x98,
		0x87, 0x0d, 0x5d, 0xae, 0xe9, 0x3e, 0x3a, 0xe5,
		0x93, 0x1b, 0xaa, 0xe8, 0xc7, 0xca, 0xcf, 0xea,
		0x4b, 0x62, 0x94, 0x52, 0xc3, 0x80, 0x26, 0xa8,
		0x1d, 0x13, 0x8b, 0xc7, 0xaa, 0xd1, 0xaf, 0x3e,
		0xf7, 0xbf, 0xd5, 0xec, 0x64, 0x6d, 0x6c, 0x28}

	hash, err := CryptoHash(message)

	verify(t, "Invalid SHA-512 hash", expected, hash, err)
}

func TestCryptoHashWithZeroLengthMessage(t *testing.T) {
	message := make([]byte, 0)
	expected := []byte{
		0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
		0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
		0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
		0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
		0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
		0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
		0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
		0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e}

	hash, err := CryptoHash(message)

	verify(t, "Invalid SHA-512 hash", expected, hash, err)
}

func TestCryptoHashLoop(t *testing.T) {
	for mlen := 0; mlen < ROUNDS; mlen++ {
		message := make([]byte, mlen)

		rand.Read(message)

		expected := sha512.Sum512(message)
		hash, err := CryptoHash(message)

		verify(t, "Invalid SHA-512 hash", expected[:], hash, err)
	}
}

func BenchmarkCryptoHash(b *testing.B) {
	message := []byte("testing\n")

	for i := 0; i < b.N; i++ {
		CryptoHash(message)
	}
}

// --- EXAMPLES ---

func ExampleCryptoHash() {
	message := []byte("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor")

	hash, err := CryptoHash(message)

	if err != nil {
		fmt.Printf("%v", err)
		return
	}

	fmt.Printf("%x", hash)

	// Output: 5dfaeb09829a546d8adcef4437957814b7b2f44a128600ab0e4f5322c6150cf5c33957f13055b9266e370c199bb764d4f38bb277b5f345e890d2e0bb3992c4dd
}
