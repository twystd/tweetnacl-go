package tweetnacl

import (
	"testing"
)

// --- CryptoCoreHSalsa20 ---

// Adapted from tests/core1.c)
func TestCryptoCoreHSalsa20(t *testing.T) {
	in := []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	key := []byte{
		0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1,
		0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35, 0x0f, 0x25,
		0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1, 0x9e, 0x33,
		0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42}

	constant := []byte{
		0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
		0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b}

	expected := []byte{
		0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4,
		0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a, 0x46, 0xc7,
		0x60, 0x09, 0x54, 0x9e, 0xac, 0x64, 0x74, 0xf2,
		0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verify(t, "Invalid HSALSA-20 key", expected, out, err)
}

// Adapted from tests/core2.c)
func TestCryptoCoreHSalsa20X(t *testing.T) {

	in := []byte{
		0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
		0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6}

	key := []byte{
		0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4,
		0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a, 0x46, 0xc7,
		0x60, 0x09, 0x54, 0x9e, 0xac, 0x64, 0x74, 0xf2,
		0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89}

	constant := []byte{
		0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
		0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b}

	expected := []byte{
		0xdc, 0x90, 0x8d, 0xda, 0x0b, 0x93, 0x44, 0xa9,
		0x53, 0x62, 0x9b, 0x73, 0x38, 0x20, 0x77, 0x88,
		0x80, 0xf3, 0xce, 0xb4, 0x21, 0xbb, 0x61, 0xb9,
		0x1c, 0xbd, 0x4c, 0x3e, 0x66, 0x25, 0x6c, 0xe4}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verify(t, "Invalid HSALSA-20 key", expected, out, err)
}

// Adapted from tests/core5.c)
func TestCryptoCoreHSalsa20Y(t *testing.T) {
	in := []byte{
		0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
		0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52}

	key := []byte{
		0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
		0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
		0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
		0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	expected := []byte{
		0xbc, 0x1b, 0x30, 0xfc, 0x07, 0x2c, 0xc1, 0x40,
		0x75, 0xe4, 0xba, 0xa7, 0x31, 0xb5, 0xa8, 0x45,
		0xea, 0x9b, 0x11, 0xe9, 0xa5, 0x19, 0x1f, 0x94,
		0xe1, 0x8c, 0xba, 0x8f, 0xd8, 0x21, 0xa7, 0xcd}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verify(t, "Invalid HSALSA-20 key", expected, out, err)
}

func TestCryptoCoreHSalsa20WithInvalidSharedSecret(t *testing.T) {
	in := []byte{
		0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
		0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3}

	key := []byte{
		0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
		0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
		0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
		0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verifyErr(t, "invalid shared secret", out, err)
}

func TestCryptoCoreHSalsa20WithInvalidSecretKey(t *testing.T) {
	in := []byte{
		0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
		0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52}

	key := []byte{
		0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
		0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
		0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
		0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verifyErr(t, "invalid secret key", out, err)
}

func TestCryptoCoreHSalsa20WithInvalidConstant(t *testing.T) {
	in := []byte{
		0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
		0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52}

	key := []byte{
		0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
		0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
		0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
		0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32}

	out, err := CryptoCoreHSalsa20(in, key, constant)

	verifyErr(t, "invalid constant", out, err)
}

func BenchmarkCryptoHSalsa20(b *testing.B) {

	in := []byte{0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00}

	key := []byte{0x4a, 0x5d, 0x9d, 0x5b,
		0xa4, 0xce, 0x2d, 0xe1,
		0x72, 0x8e, 0x3b, 0xf4,
		0x80, 0x35, 0x0f, 0x25,
		0xe0, 0x7e, 0x21, 0xc9,
		0x47, 0xd1, 0x9e, 0x33,
		0x76, 0xf0, 0x9b, 0x3c,
		0x1e, 0x16, 0x17, 0x42}

	constant := []byte{0x65, 0x78, 0x70, 0x61,
		0x6e, 0x64, 0x20, 0x33,
		0x32, 0x2d, 0x62, 0x79,
		0x74, 0x65, 0x20, 0x6b}

	for i := 0; i < b.N; i++ {
		CryptoCoreHSalsa20(in, key, constant)
	}
}

// --- CryptoCoreSalsa20 ---

// Adapted from tests/core4.c
func TestCryptoCoreSalsa20(t *testing.T) {

	in := []byte{
		101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116}

	key := []byte{
		1, 2, 3, 4, 5, 6, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16,
		201, 202, 203, 204, 205, 206, 207, 208,
		209, 210, 211, 212, 213, 214, 215, 216}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	expected := []byte{
		69, 37, 68, 39, 41, 15, 107, 193,
		255, 139, 122, 6, 170, 233, 217, 98,
		89, 144, 182, 106, 21, 51, 200, 65,
		239, 49, 222, 34, 215, 114, 40, 126,
		104, 197, 7, 225, 197, 153, 31, 2,
		102, 78, 76, 176, 84, 245, 246, 184,
		177, 160, 133, 130, 6, 72, 149, 119,
		192, 195, 132, 236, 234, 103, 246, 74}

	out, err := CryptoCoreSalsa20(in, key, constant)

	verify(t, "Invalid SALSA-20 key", expected, out, err)
}

// Adapted from tests/core6.c
// (I officially have not a clue what this test actually does, but it's in the
//  NaCl test suite so presumably it's meaningful)
func TestCryptoCoreSalsa20X(t *testing.T) {
	in := []byte{
		0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
		0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52}

	key := []byte{
		0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
		0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
		0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
		0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	expected := []byte{
		0xbc, 0x1b, 0x30, 0xfc, 0x07, 0x2c, 0xc1, 0x40,
		0x75, 0xe4, 0xba, 0xa7, 0x31, 0xb5, 0xa8, 0x45,
		0xea, 0x9b, 0x11, 0xe9, 0xa5, 0x19, 0x1f, 0x94,
		0xe1, 0x8c, 0xba, 0x8f, 0xd8, 0x21, 0xa7, 0xcd}

	out, _ := CryptoCoreSalsa20(in, key, constant)
	buffer := make([]byte, len(expected))
	var ix int = 0
	var borrow byte = 0
	var xi byte = 0
	var yi byte = 0

	for offset := 0; offset < 4; offset++ {
		borrow = 0

		for i := 0; i < 4; i++ {
			xi = out[i+offset*20] & 0x00ff
			yi = constant[i+offset*4] & 0x00ff
			buffer[ix] = (byte)((xi - yi - borrow) & 0x00ff)
			ix = ix + 1

			if xi < (yi + borrow) {
				borrow = 1
			} else {
				borrow = 0
			}
		}
	}

	for offset := 0; offset < 4; offset++ {
		borrow = 0

		for i := 0; i < 4; i++ {
			xi = out[i+24+offset*4] & 0x00ff
			yi = in[i+offset*4] & 0x00ff
			buffer[ix] = (byte)((xi - yi - borrow) & 0x00ff)
			ix = ix + 1

			if xi < (yi + borrow) {
				borrow = 1
			} else {
				borrow = 0
			}
		}
	}

	verify(t, "Invalid SALSA-20 key", expected, buffer, nil)
}

func TestCryptoCoreSalsa20WithInvalidSharedSecret(t *testing.T) {
	in := []byte{
		101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115}

	key := []byte{
		1, 2, 3, 4, 5, 6, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16,
		201, 202, 203, 204, 205, 206, 207, 208,
		209, 210, 211, 212, 213, 214, 215, 216}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	out, err := CryptoCoreSalsa20(in, key, constant)

	verifyErr(t, "invalid shared secret", out, err)
}

func TestCryptoCoreSalsa20WithInvalidSecretKey(t *testing.T) {

	in := []byte{
		101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116}

	key := []byte{
		1, 2, 3, 4, 5, 6, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16,
		201, 202, 203, 204, 205, 206, 207, 208,
		209, 210, 211, 212, 213, 214, 215}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32, 107}

	out, err := CryptoCoreSalsa20(in, key, constant)

	verifyErr(t, "invalid secret key", out, err)
}

func TestCryptoCoreSalsa20WithInvalidConstant(t *testing.T) {

	in := []byte{
		101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116}

	key := []byte{
		1, 2, 3, 4, 5, 6, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16,
		201, 202, 203, 204, 205, 206, 207, 208,
		209, 210, 211, 212, 213, 214, 215, 216}

	constant := []byte{
		101, 120, 112, 97, 110, 100, 32, 51,
		50, 45, 98, 121, 116, 101, 32}

	out, err := CryptoCoreSalsa20(in, key, constant)

	verifyErr(t, "invalid constant", out, err)
}

func BenchmarkCryptoSalsa20(b *testing.B) {

	in := []byte{
		101, 102, 103, 104,
		105, 106, 107, 108,
		109, 110, 111, 112,
		113, 114, 115, 116}

	key := []byte{
		1, 2, 3, 4,
		5, 6, 7, 8,
		9, 10, 11, 12,
		13, 14, 15, 16,
		201, 202, 203, 204,
		205, 206, 207, 208,
		209, 210, 211, 212,
		213, 214, 215, 216}

	constant := []byte{
		101, 120, 112, 97,
		110, 100, 32, 51,
		50, 45, 98, 121,
		116, 101, 32, 107}

	for i := 0; i < b.N; i++ {
		CryptoCoreSalsa20(in, key, constant)
	}
}
